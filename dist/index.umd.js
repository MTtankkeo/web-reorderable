!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).Reodeerable={})}(this,(function(e){"use strict";class t extends HTMLElement{createState(e){return{items:e}}connectedCallback(){var e;const t=[];for(let n=0;n<this.children.length;n++){const r=this.children.item(n),o=null!==(e=r.getAttribute("key"))&&void 0!==e?e:r.getAttribute("reorderable-key");if(!o)throw new Error("Should be defining key attributes missing from reorderable element items so that items can be identified.");t.push({key:o,element:r})}this.onInit(),this.onUpdateState(this.createState(t))}}class n extends t{onInit(){console.log("on init")}onUpdateState(e){console.log("on update state",e)}onUpdateContext(e){console.log(e)}}customElements.define("reorderable-list",n);class r extends HTMLElement{connectedCallback(){this.onInit(),this.onInitEvent()}onInit(){let e=this.parentElement;for(;e;){if(e instanceof t)return this.target=e;e=e.parentElement}throw new Error("<reorderable-drag> must have a reorderable ancestor element.")}onInitEvent(){}}customElements.define("reorderable-drag",r);const o=new CSSStyleSheet;o.insertRule("\n    reorderable-list {\n        display: flex;\n        flex-direction: column;\n    }\n"),o.insertRule("\n    reorderable-grid {}\n"),document.adoptedStyleSheets=[o],e.ReorderableDragElement=r,e.ReorderableElement=t,e.ReorderableGridElement=class{},e.ReorderableListElement=n}));
//# sourceMappingURL=index.umd.js.map
